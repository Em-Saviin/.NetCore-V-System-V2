
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Iframe.cshtml";
 
}


<div class="container-fluid p-0">
    <div class="row " >
        <section class="section">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-end">
                            <div class="col-1">
                                <a  id="exportToPdf"   class="btn btn-outline-primary">Export to PDF</a>
                                <button class="float-end btn-sm btn-outline-danger" onclick="window.print();" id="btnPrint">Print</button>
                            </div>
                        </div>
                        <div class="card-body" > 
                            <table class="display text-center" id="tblIcon" style="width:100%"> 
                                <thead>
                                    <tr>
                                        <th>No</th>
                                        <th>បញ្ជូលបញ្ជេញត្រៀមតម្រៀបគ្នា</th>
                                        <th>Icon</th>
                                        <th>Label</th>
                                    </tr>
                                </thead> 
                                <tbody>
                                     
                                    <!-- Dynamic List --> 
                                </tbody> 
                            </table>
                          
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>



@* <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script> *@
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
 
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>

<link href="~/css/SalesReport.css" rel="stylesheet" media="print" /> 
<script src="~/js/Icon.js"></script>


 
<style>
    table thead th {
        font-family: 'Peng Huoth';
    }
    table tbody td{
        font-family: 'Peng Huoth';
    }
</style>

<script> 

    InitializeTblIcons();
</script>
 

<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>

<script>
    function loadKhmerFont(callback) {
        fetch("/font/PengHuoth-Thin.ttf") // ✅ Ensure this path is correct
            .then(response => response.blob())
            .then(blob => {
                let reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onload = function () {
                    let base64String = reader.result.split(",")[1]; // Extract Base64
                    callback(base64String);
                };
            })
            .catch(error => console.error("Error loading Khmer font:", error));
    }

    function exportTableToPdf(tableId, fileName) {
        loadKhmerFont((khmerFontBase64) => {
            pdfMake.vfs["PengHuoth-Thin.ttf"] = khmerFontBase64; // Store in virtual file system

            pdfMake.fonts = {
                KhmerFont: {
                    normal: "PengHuoth-Thin.ttf",
                    bold: "PengHuoth-Thin.ttf",
                    italics: "PengHuoth-Thin.ttf",
                    bolditalics: "PengHuoth-Thin.ttf"
                }
            };

            let table = document.getElementById(tableId);
            let tableData = [];

            // Extract table headers
            let headers = [];
            table.querySelectorAll("thead tr th").forEach(th => {
                headers.push({ text: th.innerText, style: "tableHeader" });
            });
            tableData.push(headers);

            // Extract table rows
            table.querySelectorAll("tbody tr").forEach(tr => {
                let rowData = [];
                tr.querySelectorAll("td").forEach(td => {
                    rowData.push({ text: td.innerText, style: "tableCell" });
                });
                tableData.push(rowData);
            });

            let docDefinition = {
                content: [
                    { text: "របាយការណ៍ Icons", style: "header" }, // ✅ Correct Khmer title
                    {
                        table: {
                            headerRows: 1,
                            widths: Array(headers.length).fill("*"), // Auto column width
                            body: tableData
                        }
                    }
                ],
                styles: {
                    header: { fontSize: 16, bold: true, alignment: "center", margin: [0, 0, 0, 10] },
                    tableHeader: { bold: true, fontSize: 12, color: "black", fillColor: "#f3f3f3" },
                    tableCell: { fontSize: 10 }
                },
                defaultStyle: { font: "KhmerFont" } // ✅ Apply Khmer font globally
            };

            pdfMake.createPdf(docDefinition).download(fileName + ".pdf");
        });
    }

    // ✅ Click event to trigger PDF export
    $("#exportToPdf").click(function () {
        exportTableToPdf("tblIcon", "IconsReport");
    });
</script>

 